{"version":3,"sources":["../../../../../assets/Scripte/UIFormwork/assets/Scripte/UIFormwork/UIManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"../../../../../assets/Scripte/UIFormwork","sourcesContent":["/***\n * \n *    Title: UI框架项目\n *           主题： UI管理器  \n *    Description: \n *           功能： 是整个UI框架的核心，用户程序通过本脚本，来实现框架绝大多数的功能实现。\n *                  \n *    Date: 2018.6.11\n *    Version: 0.1版本\n *    by : wxy\n * \n *    软件开发原则：\n *    1： “高内聚，低耦合”。\n *    2： 方法的“单一职责”\n *     \n */\nimport UIType from './UIType';\nimport Constant from './Constant';\nimport UIMaskMgr from './UIMaskMgr';\nimport BaseUIForm from './BaseUIForm';\nconst { ccclass, property } = cc._decorator;\nimport ResourcesMar from './ResourcesMar';\nimport CCCompentHelper from './CCCompentHelper';\nimport { UIFormType, UIFormShowMode, AnimType, UIFormLucenyType } from './E_UIForm';\nimport { array, Node, loader, Prefab, Canvas, String, KEY } from './../../../creator.d';\n\n@ccclass\nexport default class UIManager extends cc.Component {\n\n    @property(cc.Label)\n    mDebugLabel: cc.Label = null;\n\n    public testLabel: string = \"1111\";\n\n    private static mInstance = null;\n    //unshift加入,[..]出是堆栈\n    //push加入,[..]出是队列\n    //-unshift加入 pop返回并删除/队列\n    //所有窗体缓存集合\n    public mAllUIFormMap: Map<string, cc.Node> = new Map();\n    //当前堆栈显示的窗体集合-push加入  pop返回并删除/堆栈\n    mCurStackShowUIFormArry = new Array();\n    //已经加载过的窗体-判断是否设置过父节点\n    mAlreadyOpenUIFormArry = new Array();\n    //当前显示的集合(不包括堆栈中的集合)\n    mCurShowUIFromMap: Map<string, Node> = new Map();\n\n    mGameCanvas: cc.Node = null;\n    //全屏幕显示的节点\n    private mNormalNode: cc.Node = null;\n    //固定显示的节点\n    private mFixedNode: cc.Node = null;\n    //弹出节点\n    private mPopUpNode: cc.Node = null;\n\n    public isLoadAsses: boolean = true;\n\n    public static instance(): UIManager {\n        if (this.mInstance == null) {\n            let root = cc.find(\"root\");\n            let uiManagerNode = new cc.Node(\"_UIManager\");\n            this.mInstance = uiManagerNode.addComponent<UIManager>(UIManager);\n            root.addChild(uiManagerNode);\n            uiManagerNode.setPosition(0, 0);\n        }\n        return this.mInstance;\n    }\n\n    onLoad() {\n    }\n\n\n    /**\n     * 实例化框架\n     */\n    public InitUIRoot() {\n        if (this.mGameCanvas != null) {\n            return;\n        }\n        var self = this;\n        var canvas = null;\n        this.mGameCanvas = this.mAllUIFormMap.get(\"Canvas\");\n        cc.director.getScene().addChild(self.mGameCanvas);\n        self.mGameCanvas.setPosition(480, 320);\n        self.node.parent = null;\n        self.mGameCanvas.getChildByName(Constant.mScriptMgr).addChild(self.node);\n        self.node.setPosition(0, 0);\n        self.testLabel = self.node.name;\n        self.mNormalNode = self.mGameCanvas.getChildByName(Constant.mNomal);\n        self.mFixedNode = self.mGameCanvas.getChildByName(Constant.mFixed);\n        self.mPopUpNode = self.mGameCanvas.getChildByName(Constant.mPopUp);\n        self.mDebugLabel = self.mGameCanvas.getComponentInChildren(cc.Label);\n    }\n\n\n    /**\n     * 打开窗体\n     * @param uiFormName 窗体名称\n     */\n    ShowUIForms(uiFormName: string) {\n        var thisUIForm: BaseUIForm = null;\n        thisUIForm = this.LoadFormsToAllUIFormsCatch(uiFormName);\n        if (thisUIForm == null) {\n            cc.log(\"没有将[\" + uiFormName + \"]加入到集合\");\n            return null;\n        }\n\n        //是否清空“栈集合”中得数据\n        if (thisUIForm.GetUIType.IsClearStack) {\n            this.ClearStackArray();\n        }\n\n        //根据窗体类型做处理\n        switch (thisUIForm.GetUIType.UIForms_ShowMode) {\n            case UIFormShowMode.Normal:\n                this.PushUIToCurrentCache(uiFormName);\n                break;\n            case UIFormShowMode.ReverseChange:\n                this.PushUIFormToStack(uiFormName);\n                break;\n            case UIFormShowMode.HideOther:\n                this.PushUIFormsAndHideOther(uiFormName);\n                break;\n        }\n\n        //TODO-打开窗体动画事件\n        switch (thisUIForm.GetUIType.UIForm_AnimType) {\n            case AnimType.TopToBottom:\n                //TODO此处做窗体动画,并active\n                break;\n            case AnimType.SmallToBig:\n                thisUIForm.node.runAction(cc.scaleTo(0.2,1,1))\n                //TODO此处做窗体动画,并active\n                break;\n                //.....\n        }\n    }\n\n\n     /**\n     * 关闭窗体\n     * @param uiFormName 窗体名称\n     */\n    CloseUIForms(uiFormName: string) {\n        var thisCloseUIForm: BaseUIForm = null;\n        thisCloseUIForm = this.LoadFormsToAllUIFormsCatch(uiFormName);\n        if (thisCloseUIForm == null) {\n            cc.log(\"没有将[\" + uiFormName + \"]加入到集合\");\n            return null;\n        }\n        //根据窗体类型做处理\n        switch (thisCloseUIForm.GetUIType.UIForms_ShowMode) {\n            case UIFormShowMode.Normal:\n                this.CloseNomalUIForm(uiFormName);\n                break;\n            case UIFormShowMode.ReverseChange:\n                this.ClosePopUIFrom(uiFormName);\n                break;\n            case UIFormShowMode.HideOther:\n                this.CloseAndDisplayOtherUIForms(uiFormName);\n                break;\n        }\n\n        //TODO-关闭窗体动画事件\n        switch (thisCloseUIForm.GetUIType.UIForm_AnimType) {\n            case AnimType.TopToBottom:\n                //TODO此处做窗体动画,并UnActive\n                break;\n            case AnimType.SmallToBig:\n                thisCloseUIForm.node.runAction(cc.scaleTo(0.2,0,0))\n                //TODO此处做窗体动画,并UnActive\n                break;\n                //.....\n        }\n    }\n\n\n     /**\n     * 从所有缓存中获取窗体\n     * @param uiFormName 窗体名称\n     */\n    LoadFormsToAllUIFormsCatch(uiFormName: string): BaseUIForm {\n        var thisUIForm: BaseUIForm = null;\n        var thisUIFormNode: cc.Node = this.mAllUIFormMap.get(uiFormName);\n        if (thisUIFormNode == null) {\n            cc.log(\"没有将[\" + uiFormName + \"]加入到集合\");\n            return null;\n        }\n        thisUIForm = thisUIFormNode.getComponent<BaseUIForm>(BaseUIForm);\n        for (var index = 0; index < this.mAlreadyOpenUIFormArry.length; index++) {\n            var element = this.mAlreadyOpenUIFormArry[index];\n            if (element == thisUIFormNode.name) {\n                return thisUIForm;\n            }\n        }\n        this.mAlreadyOpenUIFormArry.push(thisUIFormNode.name);\n        this.mGameCanvas.addChild(thisUIFormNode);\n        thisUIFormNode.parent = null;\n        switch (thisUIForm.GetUIType.UIForms_Type) {\n            case UIFormType.Normal:\n                this.mNormalNode.addChild(thisUIFormNode);\n                break;\n            case UIFormType.Fixed:\n                this.mFixedNode.addChild(thisUIFormNode);\n                break;\n            case UIFormType.PopUp:\n                this.mPopUpNode.addChild(thisUIFormNode);\n                break;\n        }\n        thisUIFormNode.setPosition(0, 0);\n        return thisUIForm;\n    }\n\n\n    /*废弃\n    LoadUIForm(uiFormName: string): BaseUIForm {\n        var inCount: number = 0;\n        var thisUIForm: BaseUIForm = null;\n        var thisUIFormNode: cc.Node = null;\n        var newNode: cc.Prefab = null;\n        newNode = ResourcesMar.LoadUIForm<cc.Prefab>(\"UIForm\", uiFormName);\n        return thisUIForm;\n    }*/\n\n\n    /**\n     * 加载窗体到mCurShowUIFromMap\n     * @param uiFormName 窗体名称\n     */\n    PushUIToCurrentCache(uiFormName: string) {\n        if (!this.mCurShowUIFromMap.has(uiFormName)) {\n            let curShowUIFromNode = this.mAllUIFormMap.get(uiFormName);\n            let curShowUIFrom: BaseUIForm = curShowUIFromNode.getComponent<BaseUIForm>(BaseUIForm);\n            this.mCurShowUIFromMap.set(uiFormName, curShowUIFrom);\n            curShowUIFrom.ActiveUIForm();\n        }\n    }\n\n\n    /**\n     * 加载窗体到mCurStackShowUIFormArry\n     * @param uiFormName \n     */\n    PushUIFormToStack(uiFormName: string) {\n        var curShowUIFrom: BaseUIForm = null;\n        for (var index = 0; index < this.mCurStackShowUIFormArry.length; index++) {\n            curShowUIFrom = this.mCurStackShowUIFormArry[index];\n            if (curShowUIFrom.node.name == uiFormName) {\n                return;\n            }\n        }\n        if (this.mCurStackShowUIFormArry.length > 0) {\n            let topShowUIForm: BaseUIForm = this.mCurStackShowUIFormArry.pop();\n            topShowUIForm.Freeze();\n            this.mCurStackShowUIFormArry.push(topShowUIForm);\n        }\n        let curShowUIFromNode = this.mAllUIFormMap.get(uiFormName);\n        curShowUIFrom = curShowUIFromNode.getComponent<BaseUIForm>(BaseUIForm);\n        if (curShowUIFrom != null) {\n            //当前窗口显示状态\n            curShowUIFrom.ActiveUIForm();\n            //把指定的UI窗体，入栈操作。\n            this.mCurStackShowUIFormArry.push(curShowUIFrom);\n        }\n    }\n\n\n    /**\n     * 打开隐藏其他窗体类型\n     * @param uiFormName \n     */\n    PushUIFormsAndHideOther(uiFormName: string) {\n        this.mCurStackShowUIFormArry.forEach(function (v, k) {\n            let curShowUIFromMap: BaseUIForm = v;\n            curShowUIFromMap.UnActiveUIForm();\n            curShowUIFromMap.node.active=false;\n        })\n\n        this.mCurShowUIFromMap.forEach(function (v, k) {\n            let curUIFormNode: cc.Node = v;\n            curUIFormNode.getComponent<BaseUIForm>(BaseUIForm).UnActiveUIForm();\n        })\n        this.PushUIToCurrentCache(uiFormName);\n    }\n\n    /**\n     * 普通窗体关闭\n     * @param uiFormName \n     */\n    CloseNomalUIForm(uiFormName: string) {\n        var thisCloseUIForm: cc.Node = this.mCurShowUIFromMap.get(uiFormName);\n        if (!thisCloseUIForm) {\n            return;\n        }\n        thisCloseUIForm.getComponent<BaseUIForm>(BaseUIForm).UnActiveUIForm();\n        this.mCurShowUIFromMap.delete(uiFormName);\n    }\n\n    /**\n     * 弹出窗体关闭\n     * @param uiFormName \n     */\n    ClosePopUIFrom(uiFormName: string) {\n        var thisCloseUIForm: BaseUIForm = null;\n        if (this.mCurStackShowUIFormArry.length >= 2) {\n            thisCloseUIForm = this.mCurStackShowUIFormArry.pop();\n            thisCloseUIForm.UnActiveUIForm();\n            thisCloseUIForm = this.mCurStackShowUIFormArry.pop();\n            thisCloseUIForm.Redisplay();\n            this.mCurStackShowUIFormArry.push(thisCloseUIForm);\n        }\n        if (this.mCurStackShowUIFormArry.length == 1) {\n            thisCloseUIForm = this.mCurStackShowUIFormArry.pop();\n            thisCloseUIForm.UnActiveUIForm();\n        }\n    }\n\n\n    /**\n     * 隐藏其它窗体关闭\n     * @param uiFormName \n     */\n    CloseAndDisplayOtherUIForms(uiFormName: string) {\n        this.CloseNomalUIForm(uiFormName);\n        this.mCurStackShowUIFormArry.forEach(function (v, k) {\n            let curShowUIFromMap: BaseUIForm = v;\n            curShowUIFromMap.Redisplay();\n        })\n\n        this.mCurShowUIFromMap.forEach(function (v, k) {\n            let curUIFormNode: cc.Node = v;\n            curUIFormNode.getComponent<BaseUIForm>(BaseUIForm).Redisplay();\n        })\n    }\n\n\n    /**\n     * 清空栈集合,并隐藏栈中所有窗体\n     */\n    ClearStackArray() {\n        if (this.mCurStackShowUIFormArry.length > 0) {\n            this.mCurStackShowUIFormArry.forEach(function (v, k) {\n                let curShowUIFromMap: BaseUIForm = v;\n                curShowUIFromMap.UnActiveUIForm();\n            })\n            this.mCurStackShowUIFormArry.length = 0;\n        }\n    }\n}"]}