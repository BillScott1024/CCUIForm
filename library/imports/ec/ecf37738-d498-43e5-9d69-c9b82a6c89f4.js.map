{"version":3,"sources":["../../../../../assets/Scripte/UIFormwork/assets/Scripte/UIFormwork/CCCompentHelper.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;GAYG;;AAGG,IAAA,kBAAqC,EAAnC,oBAAO,EAAE,sBAAQ,CAAmB;AAG5C;IAA6C,mCAAY;IAAzD;;IAyCA,CAAC;IAvCG;;;;OAIG;IACW,6BAAa,GAA3B,UAA4B,UAAmB,EAAE,SAAiB;QAC9D,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,WAAW,GAAmB,IAAI,CAAC;QACvC,IAAI,SAAS,GAAY,IAAI,CAAC;QAC9B,WAAW,GAAG,UAAU,CAAC,uBAAuB,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC;QAC/D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,IAAI,OAAO,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;YAC7B,IAAI,WAAW,GAAG,OAAO,CAAC,IAAI,CAAC;YAC/B,IAAI,KAAK,GAAG,WAAW,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACrC,IAAI,KAAK,IAAI,CAAC,EAAE;gBACZ,WAAW,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;aAC9C;YACD,IAAI,WAAW,IAAI,SAAS,EAAE;gBAC1B,SAAS,GAAG,OAAO,CAAC,IAAI,CAAC;gBACzB,MAAM;aACT;SACJ;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAGD;;;;;OAKG;IACW,6BAAa,GAA3B,UAA4B,SAAkB,EAAE,SAAiB,EAAE,SAAmB;QAClF,IAAI,SAAS,IAAI,IAAI,EAAE;YACnB,SAAS,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACpD;QACD,IAAI,UAAU,GAAY,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACnE,UAAU,CAAC,MAAM,GAAG,SAAS,CAAC;IAClC,CAAC;IAxCgB,eAAe;QADnC,OAAO;OACa,eAAe,CAyCnC;IAAD,sBAAC;CAzCD,AAyCC,CAzC4C,EAAE,CAAC,SAAS,GAyCxD;kBAzCoB,eAAe","file":"","sourceRoot":"../../../../../assets/Scripte/UIFormwork","sourcesContent":["/***\n * \n *    Title: UI框架项目\n *           主题： 节点辅助工具类  \n *    Description: \n *           功能： 提供程序用户一些常用的功能方法实现，方便程序员快速开发。\n *          \n *         \n *    Date: 2018.6.11\n *    Version: 0.1版本\n *    by : wxy\n *   \n */\n\nimport UIMaskMgr from './UIMaskMgr';\nconst { ccclass, property } = cc._decorator;\n\n@ccclass\nexport default class CCCompentHelper extends cc.Component {\n\n    /**\n     * 获取父类下任意子孙节点\n     * @param parentNode 父节点名称\n     * @param childName 子孙节点名称\n     */\n    public static FindChildNode(parentNode: cc.Node, childName: string): cc.Node {\n        var self = this;\n        let chaildNodes: cc.Component[] = null;\n        var childNode: cc.Node = null;\n        chaildNodes = parentNode.getComponentsInChildren(cc.Component);\n        for (var i = 0; i < chaildNodes.length; i++) {\n            var element = chaildNodes[i];\n            var curNodeName = element.name;\n            var index = curNodeName.indexOf('<');\n            if (index >= 0) {\n                curNodeName = curNodeName.substr(0, index);\n            }\n            if (curNodeName == childName) {\n                childNode = element.node;\n                break;\n            }\n        }\n        return childNode;\n    }\n\n\n    /**\n     * 重新设置任意节点的父对象\n     * @param newParent 新父节点\n     * @param childName 子节点名称\n     * @param oldParent 旧父节点,可选,不填从Canvas查找,耗!\n     */\n    public static SetNodeParent(newParent: cc.Node, childName: string, oldParent?: cc.Node) {\n        if (oldParent == null) {\n            oldParent = cc.find(\"Canvas\") || cc.find(\"Root\");\n        }\n        let chaildNode: cc.Node = this.FindChildNode(oldParent, childName);\n        chaildNode.parent = newParent;\n    }\n}\n"]}