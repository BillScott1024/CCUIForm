{"version":3,"sources":["EventDispatch.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;GAUG;;AAEH;IAAA;IAuDA,CAAC;IAlDG;;;;;OAKG;IACW,sBAAQ,GAAtB,UAAuB,IAAY,EAAE,QAAkB,EAAE,OAAY;QACjE,IAAI,SAAS,GAAe,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS,EAAE;YACZ,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC;SACtC;QACD,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IACxE,CAAC;IAED;;;;;OAKG;IACW,oBAAM,GAApB,UAAqB,IAAY,EAAE,QAAkB,EAAE,OAAY;QAC/D,IAAI,SAAS,GAAe,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS;YAAE,OAAO;QACvB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,IAAI,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC1B,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,MAAM;aACT;SACJ;QACD,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE;YACvB,OAAO,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SACxC;IACL,CAAC;IAED;;;OAGG;IACW,kBAAI,GAAlB,UAAmB,IAAY;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QAC3C,IAAI,SAAS,GAAe,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC1D,IAAI,CAAC,SAAS;YAAE,OAAO;QACvB,IAAI,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAC7B,IAAI,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,MAAM,OAAf,QAAQ,GAAQ,IAAI,SAAK,IAAI,GAAE;SAClC;IACL,CAAC;IAnDD,WAAW;IACI,uBAAS,GAAG,EAAE,CAAC;IAoDlC,oBAAC;CAvDD,AAuDC,IAAA;kBAvDoB,aAAa;AAyDlC;;GAEG;AACH;IAMI,kBAAY,QAAkB,EAAE,OAAY;QAL5C,WAAW;QACH,aAAQ,GAAa,IAAI,CAAC;QAClC,UAAU;QACF,YAAO,GAAQ,IAAI,CAAC;QAGxB,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED;;;OAGG;IACH,yBAAM,GAAN;QAAO,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,yBAAc;;;QACjB,IAAI,IAAI,GAAG,IAAI,CAAC;QAChB,CAAA,KAAA,IAAI,CAAC,QAAQ,CAAA,CAAC,IAAI,YAAC,IAAI,CAAC,OAAO,SAAK,IAAI,GAAE;IAC9C,CAAC;IAED;;;OAGG;IACH,yBAAM,GAAN,UAAO,OAAY;QACf,OAAO,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;IACnC,CAAC;IACL,eAAC;AAAD,CA5BA,AA4BC,IAAA","file":"","sourceRoot":"../../../../../assets/Scripte/UIFormwork","sourcesContent":["/**\n *    Title: UI框架项目\n *           主题: 事件调度器\n *    Description: \n *           功能：解耦界面之间的数据传递。\n * \n *     \n *    Date: 2018.6.11\n *    Version: 0.1版本\n *    by : wxy\n */\n\nexport default class EventDispatch {\n\n    /** 监听数组 */  \n    private static listeners = {};  \n  \n    /**   \n     * 注册事件  \n     * @param name 事件名称  \n     * @param callback 回调函数  \n     * @param context 上下文  \n     */  \n    public static register(name: string, callback: Function, context: any) {  \n        let observers: Observer[] = EventDispatch.listeners[name];  \n        if (!observers) {  \n            EventDispatch.listeners[name] = [];  \n        }  \n        EventDispatch.listeners[name].push(new Observer(callback, context));  \n    }  \n  \n    /**  \n     * 移除事件  \n     * @param name 事件名称  \n     * @param callback 回调函数  \n     * @param context 上下文  \n     */  \n    public static remove(name: string, callback: Function, context: any) {  \n        let observers: Observer[] = EventDispatch.listeners[name];  \n        if (!observers) return;  \n        let length = observers.length;  \n        for (let i = 0; i < length; i++) {  \n            let observer = observers[i];  \n            if (observer.compar(context)) {  \n                observers.splice(i, 1);  \n                break;  \n            }  \n        }  \n        if (observers.length == 0) {  \n            delete EventDispatch.listeners[name];  \n        }  \n    }  \n  \n    /**  \n     * 发送事件  \n     * @param name 事件名称  \n     */  \n    public static fire(name: string, ...args: any[]) {  \n        let observers: Observer[] = EventDispatch.listeners[name];  \n        if (!observers) return;  \n        let length = observers.length;  \n        for (let i = 0; i < length; i++) {  \n            let observer = observers[i];  \n            observer.notify(name, ...args);  \n        }  \n    }  \n\n}\n\n/**  \n * 观察者  \n */  \nclass Observer {  \n    /** 回调函数 */  \n    private callback: Function = null;  \n    /** 上下文 */  \n    private context: any = null;  \n  \n    constructor(callback: Function, context: any) {  \n        let self = this;  \n        self.callback = callback;  \n        self.context = context;  \n    }  \n  \n    /**  \n     * 发送通知  \n     * @param args 不定参数  \n     */  \n    notify(...args: any[]): void {  \n        let self = this;  \n        self.callback.call(self.context, ...args);  \n    }  \n  \n    /**  \n     * 上下文比较  \n     * @param context 上下文  \n     */  \n    compar(context: any): boolean {  \n        return context == this.context;  \n    }  \n}  "]}